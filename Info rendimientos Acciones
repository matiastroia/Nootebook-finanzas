{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN5ECbDU3GmALc0FpAU7oEf",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/matiastroia/Nootebook-finanzas/blob/main/Info%20rendimientos%20Acciones\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import yfinance as yf\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Definir los símbolos de las acciones\n",
        "acciones = ['NFLX', 'AAPL', 'MSFT']\n",
        "\n",
        "# Descargar el histórico de cotizaciones para cada acción\n",
        "datos_acciones = {}\n",
        "for accion in acciones:\n",
        "    datos_acciones[accion] = yf.download(accion, start='2018-01-01', end='2024-01-01')\n",
        "\n",
        "# Crear un DataFrame para los precios de cierre ajustados\n",
        "cerrados_ajustados = pd.DataFrame()\n",
        "for accion in acciones:\n",
        "    cerrados_ajustados[accion] = datos_acciones[accion]['Adj Close']\n",
        "\n",
        "# Calcular los rendimientos diarios\n",
        "rendimientos_diarios = cerrados_ajustados.pct_change().dropna()\n",
        "\n",
        "# Calcular la matriz de correlación de los rendimientos diarios\n",
        "correlacion_rendimientos = rendimientos_diarios.corr()\n",
        "\n",
        "# Calcular el desvío estándar de los rendimientos diarios\n",
        "desvio_estandar = rendimientos_diarios.std()\n",
        "\n",
        "# Mostrar los primeros datos y las estadísticas calculadas\n",
        "print(\"Rendimientos diarios:\")\n",
        "print(rendimientos_diarios.head())\n",
        "print(\"\\nMatriz de correlación de los rendimientos diarios:\")\n",
        "print(correlacion_rendimientos)\n",
        "print(\"\\nDesvío estándar de los rendimientos diarios:\")\n",
        "print(desvio_estandar)\n",
        "\n",
        "# Visualizar la correlación usando un mapa de calor\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(correlacion_rendimientos, annot=True, cmap='coolwarm', vmin=-1, vmax=1)\n",
        "plt.title('Mapa de calor de la correlación de los rendimientos diarios')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 944
        },
        "id": "0XG3mklSeaVh",
        "outputId": "79e824e2-efa1-436c-f94f-e0f218971b2f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rendimientos diarios:\n",
            "                NFLX      AAPL      MSFT\n",
            "Date                                    \n",
            "2018-01-03  0.019794 -0.000174  0.004654\n",
            "2018-01-04  0.002829  0.004645  0.008802\n",
            "2018-01-05  0.021203  0.011386  0.012398\n",
            "2018-01-08  0.009810 -0.003714  0.001020\n",
            "2018-01-09 -0.012922 -0.000115 -0.000679\n",
            "\n",
            "Matriz de correlación de los rendimientos diarios:\n",
            "          NFLX      AAPL      MSFT\n",
            "NFLX  1.000000  0.475822  0.517114\n",
            "AAPL  0.475822  1.000000  0.749858\n",
            "MSFT  0.517114  0.749858  1.000000\n",
            "\n",
            "Desvío estándar de los rendimientos diarios:\n",
            "NFLX    0.029097\n",
            "AAPL    0.019955\n",
            "MSFT    0.018976\n",
            "dtype: float64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "rKr7nf6H1bk7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "LRlEL23P1b2V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "AC0hH1a-fU65"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rendimiento_diario_promedio = rendimientos_diarios.mean()\n",
        "\n",
        "print(rendimiento_diario_promedio)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2BoL7dEtfLMy",
        "outputId": "52fe939e-fe0d-4251-933c-57dad46d5909"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "NFLX    0.001023\n",
            "AAPL    0.001230\n",
            "MSFT    0.001205\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import yfinance as yf\n",
        "import pandas as pd\n",
        "\n",
        "# Lista de tickers de las acciones\n",
        "tickers = [\n",
        "    \"AAPL\", \"ABNB\", \"ADBE\", \"AMZN\", \"AXP\", \"BAC\", \"COIN\", \"CRM\", \"CVX\", \"DIS\",\n",
        "    \"GM\", \"GOLD\", \"GOOGL\", \"INTC\", \"JPM\", \"MELI\", \"MSFT\", \"NKE\", \"NVDA\", \"PEP\",\n",
        "    \"PFE\", \"PG\", \"PYPL\", \"SBUX\", \"TSLA\", \"V\", \"WMT\"\n",
        "]\n",
        "\n",
        "# Definir la fecha de inicio como tz-naive\n",
        "start_date = pd.Timestamp(\"2010-01-01\").tz_localize(None)\n",
        "\n",
        "# Diccionario para almacenar los datos filtrados\n",
        "filtered_data_dict = {}\n",
        "\n",
        "# Descargar y procesar los datos para cada ticker\n",
        "for ticker in tickers:\n",
        "    # Descargar los datos de la acción\n",
        "    data = yf.download(ticker, start=\"2010-01-01\", end=\"2024-04-30\")\n",
        "\n",
        "    # Convertir los índices de fecha a tz-naive\n",
        "    data.index = data.index.tz_localize(None)\n",
        "\n",
        "    # Filtrar los datos\n",
        "    filtered_data = data[data.index >= start_date]\n",
        "\n",
        "    # Solo mantener la columna 'Adj Close'\n",
        "    filtered_data = filtered_data[['Adj Close']]\n",
        "\n",
        "    # Añadir los datos filtrados al diccionario\n",
        "    filtered_data_dict[ticker] = filtered_data\n",
        "\n",
        "# Crear un DataFrame combinado con los datos filtrados de todas las acciones\n",
        "combined_data = pd.concat(filtered_data_dict, axis=1)\n",
        "combined_data.columns = combined_data.columns.droplevel(1)  # Eliminar el segundo nivel de las columnas\n",
        "\n",
        "# Guardar los datos filtrados en un archivo Excel\n",
        "combined_data.to_excel(\"filtered_data.xlsx\")\n",
        "\n",
        "print(\"Los datos filtrados han sido guardados en 'filtered_data.xlsx'.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "olpcTLzBrhbn",
        "outputId": "cf89024f-0898-4261-8df0-0be8c01c45aa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Los datos filtrados han sido guardados en 'filtered_data.xlsx'.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import yfinance as yf\n",
        "import pandas as pd\n",
        "\n",
        "tickers= [\n",
        "    \"AAPL\", \"ABNB\", \"ADBE\", \"AMZN\", \"AXP\", \"BAC\", \"COIN\", \"CRM\", \"CVX\", \"DIS\",\n",
        "    \"GM\", \"GOLD\", \"GOOGL\", \"INTC\", \"JPM\", \"MELI\", \"MSFT\", \"NKE\", \"NVDA\", \"PEP\",\n",
        "    \"PFE\", \"PG\", \"PYPL\", \"SBUX\", \"TSLA\", \"V\", \"WMT\"\n",
        "]\n",
        "\n",
        "df_yahoo = yf.download(tickers,\n",
        "                       start=\"2020-01-01\",\n",
        "                       end=\"2024-04-30\")\n",
        "\n",
        "df_yahoo\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 697
        },
        "id": "bPl8TGt2vYu7",
        "outputId": "d999c739-e0b5-41c0-d916-f797fa113364"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[*********************100%%**********************]  27 of 27 completed\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Price        Adj Close                                                  \\\n",
              "Ticker            AAPL        ABNB        ADBE        AMZN         AXP   \n",
              "Date                                                                     \n",
              "2020-01-02   72.960464         NaN  334.429993   94.900497  118.555191   \n",
              "2020-01-03   72.251137         NaN  331.809998   93.748497  117.377640   \n",
              "2020-01-06   72.826866         NaN  333.709991   95.143997  116.868950   \n",
              "2020-01-07   72.484344         NaN  333.390015   95.343002  116.256638   \n",
              "2020-01-08   73.650345         NaN  337.869995   94.598503  118.263184   \n",
              "...                ...         ...         ...         ...         ...   \n",
              "2024-04-23  166.673920  160.949997  472.899994  179.539993  238.960007   \n",
              "2024-04-24  168.791061  162.839996  477.119995  176.589996  239.119995   \n",
              "2024-04-25  169.659882  163.009995  473.440002  173.669998  237.100006   \n",
              "2024-04-26  169.070679  164.229996  477.559998  179.619995  235.639999   \n",
              "2024-04-29  173.264984  162.250000  473.070007  180.960007  238.919998   \n",
              "\n",
              "Price                                                                  ...  \\\n",
              "Ticker            BAC        COIN         CRM         CVX         DIS  ...   \n",
              "Date                                                                   ...   \n",
              "2020-01-02  32.048065         NaN  166.772156   99.316269  147.718567  ...   \n",
              "2020-01-03  31.382637         NaN  165.953217   98.972778  146.024094  ...   \n",
              "2020-01-06  31.337681         NaN  173.223724   98.637428  145.176849  ...   \n",
              "2020-01-07  31.130865         NaN  175.770401   97.377892  145.226685  ...   \n",
              "2020-01-08  31.445585         NaN  177.098663   96.265556  144.927658  ...   \n",
              "...               ...         ...         ...         ...         ...  ...   \n",
              "2024-04-23  38.369999  236.429993  276.679993  161.222000  113.709999  ...   \n",
              "2024-04-24  38.320000  224.369995  276.190002  161.934799  113.919998  ...   \n",
              "2024-04-25  37.910000  223.610001  273.140015  163.627701  112.769997  ...   \n",
              "2024-04-26  37.830002  236.320007  274.290009  164.231598  112.730003  ...   \n",
              "2024-04-29  37.549999  218.160004  275.739990  164.667206  112.080002  ...   \n",
              "\n",
              "Price        Volume                                                            \\\n",
              "Ticker          NKE      NVDA       PEP       PFE       PG      PYPL     SBUX   \n",
              "Date                                                                            \n",
              "2020-01-02  5644100  23753600   3784100  16514072  8130800   7418800  6473800   \n",
              "2020-01-03  4541800  20538400   4000100  14922848  7970500   7098300  4874100   \n",
              "2020-01-06  4612400  26263600   4085100  15771951  6674400   6764500  5409800   \n",
              "2020-01-07  6719900  31485600   5718100  20108107  7583400   6898700  6514700   \n",
              "2020-01-08  4942200  27710800   3681400  16403507  5385100   8293600  7296300   \n",
              "...             ...       ...       ...       ...      ...       ...      ...   \n",
              "2024-04-23  6582700  43855900   9145000  24297800  7707300   9913000  5670500   \n",
              "2024-04-24  6493200  51220800  10016700  24547800  7217600   8189100  7183900   \n",
              "2024-04-25  5317900  42464100   7441500  47661400  7094600  11711200  7284600   \n",
              "2024-04-26  6115700  55101100   4472100  46526500  5659800  14200900  7185300   \n",
              "2024-04-29  5030700  38897100   3224500  39995300  4621000  19142400  8522800   \n",
              "\n",
              "Price                                      \n",
              "Ticker           TSLA         V       WMT  \n",
              "Date                                       \n",
              "2020-01-02  142981500   8733000  20294700  \n",
              "2020-01-03  266677500   4899700  16197600  \n",
              "2020-01-06  151995000  10109500  19336500  \n",
              "2020-01-07  268231500   4392300  20540700  \n",
              "2020-01-08  467164500   5712000  17627400  \n",
              "...               ...       ...       ...  \n",
              "2024-04-23  124545100   6438000  17963900  \n",
              "2024-04-24  181178000   8807200  18529100  \n",
              "2024-04-25  126427500   8064600  19263000  \n",
              "2024-04-26  109815700   6840600  11045200  \n",
              "2024-04-29  243869700   4128600   9785100  \n",
              "\n",
              "[1088 rows x 162 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1bb04917-a00f-4f45-888a-c65a792abaed\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <th colspan=\"10\" halign=\"left\">Adj Close</th>\n",
              "      <th>...</th>\n",
              "      <th colspan=\"10\" halign=\"left\">Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ticker</th>\n",
              "      <th>AAPL</th>\n",
              "      <th>ABNB</th>\n",
              "      <th>ADBE</th>\n",
              "      <th>AMZN</th>\n",
              "      <th>AXP</th>\n",
              "      <th>BAC</th>\n",
              "      <th>COIN</th>\n",
              "      <th>CRM</th>\n",
              "      <th>CVX</th>\n",
              "      <th>DIS</th>\n",
              "      <th>...</th>\n",
              "      <th>NKE</th>\n",
              "      <th>NVDA</th>\n",
              "      <th>PEP</th>\n",
              "      <th>PFE</th>\n",
              "      <th>PG</th>\n",
              "      <th>PYPL</th>\n",
              "      <th>SBUX</th>\n",
              "      <th>TSLA</th>\n",
              "      <th>V</th>\n",
              "      <th>WMT</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2020-01-02</th>\n",
              "      <td>72.960464</td>\n",
              "      <td>NaN</td>\n",
              "      <td>334.429993</td>\n",
              "      <td>94.900497</td>\n",
              "      <td>118.555191</td>\n",
              "      <td>32.048065</td>\n",
              "      <td>NaN</td>\n",
              "      <td>166.772156</td>\n",
              "      <td>99.316269</td>\n",
              "      <td>147.718567</td>\n",
              "      <td>...</td>\n",
              "      <td>5644100</td>\n",
              "      <td>23753600</td>\n",
              "      <td>3784100</td>\n",
              "      <td>16514072</td>\n",
              "      <td>8130800</td>\n",
              "      <td>7418800</td>\n",
              "      <td>6473800</td>\n",
              "      <td>142981500</td>\n",
              "      <td>8733000</td>\n",
              "      <td>20294700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-01-03</th>\n",
              "      <td>72.251137</td>\n",
              "      <td>NaN</td>\n",
              "      <td>331.809998</td>\n",
              "      <td>93.748497</td>\n",
              "      <td>117.377640</td>\n",
              "      <td>31.382637</td>\n",
              "      <td>NaN</td>\n",
              "      <td>165.953217</td>\n",
              "      <td>98.972778</td>\n",
              "      <td>146.024094</td>\n",
              "      <td>...</td>\n",
              "      <td>4541800</td>\n",
              "      <td>20538400</td>\n",
              "      <td>4000100</td>\n",
              "      <td>14922848</td>\n",
              "      <td>7970500</td>\n",
              "      <td>7098300</td>\n",
              "      <td>4874100</td>\n",
              "      <td>266677500</td>\n",
              "      <td>4899700</td>\n",
              "      <td>16197600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-01-06</th>\n",
              "      <td>72.826866</td>\n",
              "      <td>NaN</td>\n",
              "      <td>333.709991</td>\n",
              "      <td>95.143997</td>\n",
              "      <td>116.868950</td>\n",
              "      <td>31.337681</td>\n",
              "      <td>NaN</td>\n",
              "      <td>173.223724</td>\n",
              "      <td>98.637428</td>\n",
              "      <td>145.176849</td>\n",
              "      <td>...</td>\n",
              "      <td>4612400</td>\n",
              "      <td>26263600</td>\n",
              "      <td>4085100</td>\n",
              "      <td>15771951</td>\n",
              "      <td>6674400</td>\n",
              "      <td>6764500</td>\n",
              "      <td>5409800</td>\n",
              "      <td>151995000</td>\n",
              "      <td>10109500</td>\n",
              "      <td>19336500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-01-07</th>\n",
              "      <td>72.484344</td>\n",
              "      <td>NaN</td>\n",
              "      <td>333.390015</td>\n",
              "      <td>95.343002</td>\n",
              "      <td>116.256638</td>\n",
              "      <td>31.130865</td>\n",
              "      <td>NaN</td>\n",
              "      <td>175.770401</td>\n",
              "      <td>97.377892</td>\n",
              "      <td>145.226685</td>\n",
              "      <td>...</td>\n",
              "      <td>6719900</td>\n",
              "      <td>31485600</td>\n",
              "      <td>5718100</td>\n",
              "      <td>20108107</td>\n",
              "      <td>7583400</td>\n",
              "      <td>6898700</td>\n",
              "      <td>6514700</td>\n",
              "      <td>268231500</td>\n",
              "      <td>4392300</td>\n",
              "      <td>20540700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-01-08</th>\n",
              "      <td>73.650345</td>\n",
              "      <td>NaN</td>\n",
              "      <td>337.869995</td>\n",
              "      <td>94.598503</td>\n",
              "      <td>118.263184</td>\n",
              "      <td>31.445585</td>\n",
              "      <td>NaN</td>\n",
              "      <td>177.098663</td>\n",
              "      <td>96.265556</td>\n",
              "      <td>144.927658</td>\n",
              "      <td>...</td>\n",
              "      <td>4942200</td>\n",
              "      <td>27710800</td>\n",
              "      <td>3681400</td>\n",
              "      <td>16403507</td>\n",
              "      <td>5385100</td>\n",
              "      <td>8293600</td>\n",
              "      <td>7296300</td>\n",
              "      <td>467164500</td>\n",
              "      <td>5712000</td>\n",
              "      <td>17627400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-04-23</th>\n",
              "      <td>166.673920</td>\n",
              "      <td>160.949997</td>\n",
              "      <td>472.899994</td>\n",
              "      <td>179.539993</td>\n",
              "      <td>238.960007</td>\n",
              "      <td>38.369999</td>\n",
              "      <td>236.429993</td>\n",
              "      <td>276.679993</td>\n",
              "      <td>161.222000</td>\n",
              "      <td>113.709999</td>\n",
              "      <td>...</td>\n",
              "      <td>6582700</td>\n",
              "      <td>43855900</td>\n",
              "      <td>9145000</td>\n",
              "      <td>24297800</td>\n",
              "      <td>7707300</td>\n",
              "      <td>9913000</td>\n",
              "      <td>5670500</td>\n",
              "      <td>124545100</td>\n",
              "      <td>6438000</td>\n",
              "      <td>17963900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-04-24</th>\n",
              "      <td>168.791061</td>\n",
              "      <td>162.839996</td>\n",
              "      <td>477.119995</td>\n",
              "      <td>176.589996</td>\n",
              "      <td>239.119995</td>\n",
              "      <td>38.320000</td>\n",
              "      <td>224.369995</td>\n",
              "      <td>276.190002</td>\n",
              "      <td>161.934799</td>\n",
              "      <td>113.919998</td>\n",
              "      <td>...</td>\n",
              "      <td>6493200</td>\n",
              "      <td>51220800</td>\n",
              "      <td>10016700</td>\n",
              "      <td>24547800</td>\n",
              "      <td>7217600</td>\n",
              "      <td>8189100</td>\n",
              "      <td>7183900</td>\n",
              "      <td>181178000</td>\n",
              "      <td>8807200</td>\n",
              "      <td>18529100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-04-25</th>\n",
              "      <td>169.659882</td>\n",
              "      <td>163.009995</td>\n",
              "      <td>473.440002</td>\n",
              "      <td>173.669998</td>\n",
              "      <td>237.100006</td>\n",
              "      <td>37.910000</td>\n",
              "      <td>223.610001</td>\n",
              "      <td>273.140015</td>\n",
              "      <td>163.627701</td>\n",
              "      <td>112.769997</td>\n",
              "      <td>...</td>\n",
              "      <td>5317900</td>\n",
              "      <td>42464100</td>\n",
              "      <td>7441500</td>\n",
              "      <td>47661400</td>\n",
              "      <td>7094600</td>\n",
              "      <td>11711200</td>\n",
              "      <td>7284600</td>\n",
              "      <td>126427500</td>\n",
              "      <td>8064600</td>\n",
              "      <td>19263000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-04-26</th>\n",
              "      <td>169.070679</td>\n",
              "      <td>164.229996</td>\n",
              "      <td>477.559998</td>\n",
              "      <td>179.619995</td>\n",
              "      <td>235.639999</td>\n",
              "      <td>37.830002</td>\n",
              "      <td>236.320007</td>\n",
              "      <td>274.290009</td>\n",
              "      <td>164.231598</td>\n",
              "      <td>112.730003</td>\n",
              "      <td>...</td>\n",
              "      <td>6115700</td>\n",
              "      <td>55101100</td>\n",
              "      <td>4472100</td>\n",
              "      <td>46526500</td>\n",
              "      <td>5659800</td>\n",
              "      <td>14200900</td>\n",
              "      <td>7185300</td>\n",
              "      <td>109815700</td>\n",
              "      <td>6840600</td>\n",
              "      <td>11045200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-04-29</th>\n",
              "      <td>173.264984</td>\n",
              "      <td>162.250000</td>\n",
              "      <td>473.070007</td>\n",
              "      <td>180.960007</td>\n",
              "      <td>238.919998</td>\n",
              "      <td>37.549999</td>\n",
              "      <td>218.160004</td>\n",
              "      <td>275.739990</td>\n",
              "      <td>164.667206</td>\n",
              "      <td>112.080002</td>\n",
              "      <td>...</td>\n",
              "      <td>5030700</td>\n",
              "      <td>38897100</td>\n",
              "      <td>3224500</td>\n",
              "      <td>39995300</td>\n",
              "      <td>4621000</td>\n",
              "      <td>19142400</td>\n",
              "      <td>8522800</td>\n",
              "      <td>243869700</td>\n",
              "      <td>4128600</td>\n",
              "      <td>9785100</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1088 rows × 162 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1bb04917-a00f-4f45-888a-c65a792abaed')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1bb04917-a00f-4f45-888a-c65a792abaed button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1bb04917-a00f-4f45-888a-c65a792abaed');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6de21e47-e67d-405f-bdfd-7a409d135827\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6de21e47-e67d-405f-bdfd-7a409d135827')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6de21e47-e67d-405f-bdfd-7a409d135827 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_e12d7d8a-c4f1-4988-8047-b6054808e5c3\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_yahoo')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_e12d7d8a-c4f1-4988-8047-b6054808e5c3 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_yahoo');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_yahoo"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_yahoo.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VGQZyIZIQSGR",
        "outputId": "fabc28d1-d9f2-4666-8578-f465ae74cce2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "DatetimeIndex: 1088 entries, 2020-01-02 to 2024-04-29\n",
            "Columns: 162 entries, ('Adj Close', 'AAPL') to ('Volume', 'WMT')\n",
            "dtypes: float64(137), int64(25)\n",
            "memory usage: 1.4 MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_yahoo.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 405
        },
        "id": "3xE2PnIpQjlN",
        "outputId": "6a22d8b2-3533-4a5c-cacc-e9d750a704b0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Price       Adj Close                                                          \\\n",
              "Ticker           AAPL ABNB        ADBE       AMZN         AXP        BAC COIN   \n",
              "Date                                                                            \n",
              "2020-01-02  72.960464  NaN  334.429993  94.900497  118.555199  32.048061  NaN   \n",
              "2020-01-03  72.251137  NaN  331.809998  93.748497  117.377655  31.382641  NaN   \n",
              "2020-01-06  72.826859  NaN  333.709991  95.143997  116.868965  31.337679  NaN   \n",
              "2020-01-07  72.484329  NaN  333.390015  95.343002  116.256622  31.130861  NaN   \n",
              "2020-01-08  73.650345  NaN  337.869995  94.598503  118.263176  31.445580  NaN   \n",
              "\n",
              "Price                                          ...   Volume            \\\n",
              "Ticker             CRM        CVX         DIS  ...      NKE      NVDA   \n",
              "Date                                           ...                      \n",
              "2020-01-02  166.772156  99.316292  147.718567  ...  5644100  23753600   \n",
              "2020-01-03  165.953217  98.972771  146.024094  ...  4541800  20538400   \n",
              "2020-01-06  173.223724  98.637428  145.176849  ...  4612400  26263600   \n",
              "2020-01-07  175.770401  97.377884  145.226685  ...  6719900  31485600   \n",
              "2020-01-08  177.098663  96.265556  144.927658  ...  4942200  27710800   \n",
              "\n",
              "Price                                                                          \\\n",
              "Ticker          PEP       PFE       PG     PYPL     SBUX       TSLA         V   \n",
              "Date                                                                            \n",
              "2020-01-02  3784100  16514072  8130800  7418800  6473800  142981500   8733000   \n",
              "2020-01-03  4000100  14922848  7970500  7098300  4874100  266677500   4899700   \n",
              "2020-01-06  4085100  15771951  6674400  6764500  5409800  151995000  10109500   \n",
              "2020-01-07  5718100  20108107  7583400  6898700  6514700  268231500   4392300   \n",
              "2020-01-08  3681400  16403507  5385100  8293600  7296300  467164500   5712000   \n",
              "\n",
              "Price                 \n",
              "Ticker           WMT  \n",
              "Date                  \n",
              "2020-01-02  20294700  \n",
              "2020-01-03  16197600  \n",
              "2020-01-06  19336500  \n",
              "2020-01-07  20540700  \n",
              "2020-01-08  17627400  \n",
              "\n",
              "[5 rows x 162 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-24806750-7181-41fd-8dbf-17e1d93183e1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <th colspan=\"10\" halign=\"left\">Adj Close</th>\n",
              "      <th>...</th>\n",
              "      <th colspan=\"10\" halign=\"left\">Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ticker</th>\n",
              "      <th>AAPL</th>\n",
              "      <th>ABNB</th>\n",
              "      <th>ADBE</th>\n",
              "      <th>AMZN</th>\n",
              "      <th>AXP</th>\n",
              "      <th>BAC</th>\n",
              "      <th>COIN</th>\n",
              "      <th>CRM</th>\n",
              "      <th>CVX</th>\n",
              "      <th>DIS</th>\n",
              "      <th>...</th>\n",
              "      <th>NKE</th>\n",
              "      <th>NVDA</th>\n",
              "      <th>PEP</th>\n",
              "      <th>PFE</th>\n",
              "      <th>PG</th>\n",
              "      <th>PYPL</th>\n",
              "      <th>SBUX</th>\n",
              "      <th>TSLA</th>\n",
              "      <th>V</th>\n",
              "      <th>WMT</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2020-01-02</th>\n",
              "      <td>72.960464</td>\n",
              "      <td>NaN</td>\n",
              "      <td>334.429993</td>\n",
              "      <td>94.900497</td>\n",
              "      <td>118.555199</td>\n",
              "      <td>32.048061</td>\n",
              "      <td>NaN</td>\n",
              "      <td>166.772156</td>\n",
              "      <td>99.316292</td>\n",
              "      <td>147.718567</td>\n",
              "      <td>...</td>\n",
              "      <td>5644100</td>\n",
              "      <td>23753600</td>\n",
              "      <td>3784100</td>\n",
              "      <td>16514072</td>\n",
              "      <td>8130800</td>\n",
              "      <td>7418800</td>\n",
              "      <td>6473800</td>\n",
              "      <td>142981500</td>\n",
              "      <td>8733000</td>\n",
              "      <td>20294700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-01-03</th>\n",
              "      <td>72.251137</td>\n",
              "      <td>NaN</td>\n",
              "      <td>331.809998</td>\n",
              "      <td>93.748497</td>\n",
              "      <td>117.377655</td>\n",
              "      <td>31.382641</td>\n",
              "      <td>NaN</td>\n",
              "      <td>165.953217</td>\n",
              "      <td>98.972771</td>\n",
              "      <td>146.024094</td>\n",
              "      <td>...</td>\n",
              "      <td>4541800</td>\n",
              "      <td>20538400</td>\n",
              "      <td>4000100</td>\n",
              "      <td>14922848</td>\n",
              "      <td>7970500</td>\n",
              "      <td>7098300</td>\n",
              "      <td>4874100</td>\n",
              "      <td>266677500</td>\n",
              "      <td>4899700</td>\n",
              "      <td>16197600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-01-06</th>\n",
              "      <td>72.826859</td>\n",
              "      <td>NaN</td>\n",
              "      <td>333.709991</td>\n",
              "      <td>95.143997</td>\n",
              "      <td>116.868965</td>\n",
              "      <td>31.337679</td>\n",
              "      <td>NaN</td>\n",
              "      <td>173.223724</td>\n",
              "      <td>98.637428</td>\n",
              "      <td>145.176849</td>\n",
              "      <td>...</td>\n",
              "      <td>4612400</td>\n",
              "      <td>26263600</td>\n",
              "      <td>4085100</td>\n",
              "      <td>15771951</td>\n",
              "      <td>6674400</td>\n",
              "      <td>6764500</td>\n",
              "      <td>5409800</td>\n",
              "      <td>151995000</td>\n",
              "      <td>10109500</td>\n",
              "      <td>19336500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-01-07</th>\n",
              "      <td>72.484329</td>\n",
              "      <td>NaN</td>\n",
              "      <td>333.390015</td>\n",
              "      <td>95.343002</td>\n",
              "      <td>116.256622</td>\n",
              "      <td>31.130861</td>\n",
              "      <td>NaN</td>\n",
              "      <td>175.770401</td>\n",
              "      <td>97.377884</td>\n",
              "      <td>145.226685</td>\n",
              "      <td>...</td>\n",
              "      <td>6719900</td>\n",
              "      <td>31485600</td>\n",
              "      <td>5718100</td>\n",
              "      <td>20108107</td>\n",
              "      <td>7583400</td>\n",
              "      <td>6898700</td>\n",
              "      <td>6514700</td>\n",
              "      <td>268231500</td>\n",
              "      <td>4392300</td>\n",
              "      <td>20540700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-01-08</th>\n",
              "      <td>73.650345</td>\n",
              "      <td>NaN</td>\n",
              "      <td>337.869995</td>\n",
              "      <td>94.598503</td>\n",
              "      <td>118.263176</td>\n",
              "      <td>31.445580</td>\n",
              "      <td>NaN</td>\n",
              "      <td>177.098663</td>\n",
              "      <td>96.265556</td>\n",
              "      <td>144.927658</td>\n",
              "      <td>...</td>\n",
              "      <td>4942200</td>\n",
              "      <td>27710800</td>\n",
              "      <td>3681400</td>\n",
              "      <td>16403507</td>\n",
              "      <td>5385100</td>\n",
              "      <td>8293600</td>\n",
              "      <td>7296300</td>\n",
              "      <td>467164500</td>\n",
              "      <td>5712000</td>\n",
              "      <td>17627400</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 162 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-24806750-7181-41fd-8dbf-17e1d93183e1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-24806750-7181-41fd-8dbf-17e1d93183e1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-24806750-7181-41fd-8dbf-17e1d93183e1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b73df067-bd92-4f53-93d4-99079826cc2a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b73df067-bd92-4f53-93d4-99079826cc2a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b73df067-bd92-4f53-93d4-99079826cc2a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_yahoo"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import yfinance as yf\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "tickers = [\n",
        "    \"AAPL\", \"ABNB\", \"ADBE\", \"AMZN\", \"AXP\", \"BAC\", \"COIN\", \"CRM\", \"CVX\", \"DIS\",\n",
        "    \"GM\", \"GOLD\", \"GOOGL\", \"INTC\", \"JPM\", \"MELI\", \"MSFT\", \"NKE\", \"NVDA\", \"PEP\",\n",
        "    \"PFE\", \"PG\", \"PYPL\", \"SBUX\", \"TSLA\", \"V\", \"WMT\"\n",
        "]\n",
        "\n",
        "# Descargar los datos de los tickers especificados desde Yahoo Finance\n",
        "df = yf.download(tickers, start=\"2020-01-01\", end=\"2024-04-30\")\n",
        "\n",
        "# Seleccionar solo la columna 'Adj Close'\n",
        "df_adj_close = df['Adj Close']\n",
        "\n",
        "# Calcular retornos simples y logarítmicos\n",
        "df_simple_rtn = df_adj_close.pct_change()\n",
        "df_log_rtn = np.log(df_adj_close / df_adj_close.shift(1))\n",
        "\n",
        "# Concatenar los DataFrames\n",
        "df_combined = pd.concat([df_adj_close, df_simple_rtn, df_log_rtn], axis=1, keys=['adj_close', 'simple_rtn', 'log_rtn'])\n",
        "\n",
        "# Mostrar el DataFrame resultante\n",
        "print(df_combined)\n",
        "\n",
        "# Si quieres guardar el resultado en un archivo Excel\n",
        "df_combined.to_excel(\"adj_close_data.xlsx\")\n",
        "print(\"Los datos han sido guardados en 'adj_close_data.xlsx'.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zIvXAzbSKVqz",
        "outputId": "be81f3d2-e690-4cf9-e123-830c262de211"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[*********************100%%**********************]  27 of 27 completed\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "             adj_close                                                  \\\n",
            "Ticker            AAPL        ABNB        ADBE        AMZN         AXP   \n",
            "Date                                                                     \n",
            "2020-01-02   72.960464         NaN  334.429993   94.900497  118.555191   \n",
            "2020-01-03   72.251144         NaN  331.809998   93.748497  117.377647   \n",
            "2020-01-06   72.826866         NaN  333.709991   95.143997  116.868965   \n",
            "2020-01-07   72.484352         NaN  333.390015   95.343002  116.256645   \n",
            "2020-01-08   73.650345         NaN  337.869995   94.598503  118.263176   \n",
            "...                ...         ...         ...         ...         ...   \n",
            "2024-04-23  166.673920  160.949997  472.899994  179.539993  238.960007   \n",
            "2024-04-24  168.791061  162.839996  477.119995  176.589996  239.119995   \n",
            "2024-04-25  169.659882  163.009995  473.440002  173.669998  237.100006   \n",
            "2024-04-26  169.070679  164.229996  477.559998  179.619995  235.639999   \n",
            "2024-04-29  173.264984  162.250000  473.070007  180.960007  238.919998   \n",
            "\n",
            "                                                                       ...  \\\n",
            "Ticker            BAC        COIN         CRM         CVX         DIS  ...   \n",
            "Date                                                                   ...   \n",
            "2020-01-02  32.048069         NaN  166.772156   99.316284  147.718567  ...   \n",
            "2020-01-03  31.382637         NaN  165.953217   98.972771  146.024094  ...   \n",
            "2020-01-06  31.337687         NaN  173.223724   98.637428  145.176849  ...   \n",
            "2020-01-07  31.130850         NaN  175.770401   97.377892  145.226685  ...   \n",
            "2020-01-08  31.445589         NaN  177.098663   96.265549  144.927658  ...   \n",
            "...               ...         ...         ...         ...         ...  ...   \n",
            "2024-04-23  38.369999  236.429993  276.679993  161.222000  113.709999  ...   \n",
            "2024-04-24  38.320000  224.369995  276.190002  161.934799  113.919998  ...   \n",
            "2024-04-25  37.910000  223.610001  273.140015  163.627701  112.769997  ...   \n",
            "2024-04-26  37.830002  236.320007  274.290009  164.231598  112.730003  ...   \n",
            "2024-04-29  37.549999  218.160004  275.739990  164.667206  112.080002  ...   \n",
            "\n",
            "             log_rtn                                                    \\\n",
            "Ticker           NKE      NVDA       PEP       PFE        PG      PYPL   \n",
            "Date                                                                     \n",
            "2020-01-02       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "2020-01-03 -0.002744 -0.016135 -0.001400 -0.005380 -0.006748 -0.018132   \n",
            "2020-01-06 -0.000884  0.004185  0.003827 -0.001285  0.001386  0.012881   \n",
            "2020-01-07 -0.000491  0.012034 -0.015843 -0.003349 -0.006211 -0.004549   \n",
            "2020-01-08 -0.002262  0.001874  0.005136  0.007968  0.004254  0.019415   \n",
            "...              ...       ...       ...       ...       ...       ...   \n",
            "2024-04-23 -0.001807  0.035881 -0.030145  0.002282  0.005962  0.019433   \n",
            "2024-04-24  0.006573 -0.033884  0.035514 -0.001902  0.006788  0.006343   \n",
            "2024-04-25 -0.007424  0.036416 -0.004123 -0.039206 -0.000308 -0.011478   \n",
            "2024-04-26  0.001914  0.059924 -0.006245  0.005527 -0.007782  0.028604   \n",
            "2024-04-29 -0.000638  0.000251  0.003184  0.009404  0.002291  0.015495   \n",
            "\n",
            "                                                    \n",
            "Ticker          SBUX      TSLA         V       WMT  \n",
            "Date                                                \n",
            "2020-01-02       NaN       NaN       NaN       NaN  \n",
            "2020-01-03 -0.005837  0.029203 -0.007985 -0.008867  \n",
            "2020-01-06 -0.007912  0.019072 -0.002165 -0.002038  \n",
            "2020-01-07 -0.003068  0.038067 -0.002646 -0.009308  \n",
            "2020-01-08  0.011542  0.048033  0.016973 -0.003438  \n",
            "...              ...       ...       ...       ...  \n",
            "2024-04-23 -0.003522  0.018345  0.006515 -0.017613  \n",
            "2024-04-24  0.009965  0.113874  0.003314  0.013114  \n",
            "2024-04-25 -0.010307  0.048458  0.000509  0.005663  \n",
            "2024-04-26  0.004657 -0.011168 -0.002329 -0.000831  \n",
            "2024-04-29  0.000906  0.142427 -0.009810  0.001329  \n",
            "\n",
            "[1088 rows x 81 columns]\n",
            "Los datos han sido guardados en 'adj_close_data.xlsx'.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import pandas_datareader.data as web\n",
        "import datetime\n",
        "\n",
        "# Configurar las fechas de inicio y fin para los datos históricos\n",
        "start = datetime.datetime(2000, 1, 1)\n",
        "end = datetime.datetime(2024, 4, 30)\n",
        "\n",
        "# Descargar datos de inflación de Argentina (Índice de Precios al Consumidor) desde FRED\n",
        "# El código 'FPCPITOTLZGARG' se refiere al índice de precios al consumidor de Argentina desde la base de datos del Banco Mundial\n",
        "df_inflation = web.DataReader('FPCPITOTLZGARG', 'fred', start, end)\n",
        "\n",
        "# Guardar los datos en un archivo Excel\n",
        "df_inflation.to_excel('inflation_data_argentina.xlsx')\n",
        "print(\"Los datos de inflación han sido guardados en 'inflation_data_argentina.xlsx'.\")\n",
        "\n",
        "# Mostrar los datos\n",
        "print(df_inflation)"
      ],
      "metadata": {
        "id": "BZIMyPf9WYSp",
        "outputId": "49cff3b9-4f22-43f6-c472-27ae9a7d69be",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Los datos de inflación han sido guardados en 'inflation_data_argentina.xlsx'.\n",
            "            FPCPITOTLZGARG\n",
            "DATE                      \n",
            "2018-01-01       34.277224\n",
            "2019-01-01       53.548304\n"
          ]
        }
      ]
    }
  ]
}